@page "/comment"
@inject ICommentRepository _commentRepository
@inject IJSRuntime _jsRuntime
@inject IFileUpload _fileUpload
@*@attribute [Authorize]*@
@inject NavigationManager _navigationManager
<_DeleteConfirmation ConfirmationChanged="ConfirmDelete_Click" IsParentComponentProcessing="IsLoading"></_DeleteConfirmation>
<div class="row mt-4">
    <div class="col-6">
        <h4 class="card-title text-primary">Comment List</h4>
    </div>
</div>
<div class="col-12">
    @if (Comments.Any())
    {
        <table class="table table-bordered">
            <thead>
                <tr>
                    <th>Id</th>
                    <th>Text</th>
                    <th>CreatedAt</th>
                    <th>Name</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Comments)
                {
                    <tr>
                        <td>@item.Id</td>
                        <td>@item.Name</td>
                        <td>@item.CreatedAt</td>
                        <td>@item.Text</td>
                        <td>
                            <button class="btn btn-danger" @onclick="()=>HandleDelete(item.Id)">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        if (IsLoading)
        {
            <div class="text-center">
                <img src="/image/loading.gif" />
            </div>
        }
        else
        {
            <p>No Product found.</p>
        }
    }
</div>
@code {
    private IEnumerable<Tangy_DataAccess.Comment> Comments { get; set; } = new List<Tangy_DataAccess.Comment>();
    public bool IsLoading { get; set; }
    private int DeleteProductId { get; set; } = 0;

    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationState;
        if (!authState.User.Identity.IsAuthenticated)
        {
            var uri = new Uri(_navigationManager.Uri);
            _navigationManager.NavigateTo($"/identity/account/login?returnUrl={uri.LocalPath}", forceLoad: true);
        }
        else
        {
            if (!authState.User.IsInRole(Tangy_Common.SD.Role_Admin))
            {
                _navigationManager.NavigateTo("/ErrorPage");
            }
        }
    }
    protected override async Task OnAfterRenderAsync(bool firsRender)
    {
        if (firsRender)
        {
            await LoadComments();
        }
    }
    private async Task LoadComments()
    {
        IsLoading = true;
        StateHasChanged();
        Comments = await _commentRepository.GetAll();
        IsLoading = false;
        StateHasChanged();
    }
    private void HandleDelete(int id)
    {
        DeleteProductId = id;
        _jsRuntime.InvokeVoidAsync("ShowDeleteConfirmationModal");
    }

    public async Task ConfirmDelete_Click(bool isConfirmed)
    {
        IsLoading = true;
        if (isConfirmed && DeleteProductId != 0)
        {
            await Task.Delay(2000);
            // delete
            Tangy_DataAccess.Comment comment = await _commentRepository.GetCommentByIdAsync(DeleteProductId);
          
            await _commentRepository.DeleteCommentAsync(DeleteProductId);
            await _jsRuntime.ToastrSuccess("Product Deleted Successfully");
            await LoadComments();
            await _jsRuntime.InvokeVoidAsync("HideDeleteConfirmationModal");
        }
        IsLoading = false;
    }
}
