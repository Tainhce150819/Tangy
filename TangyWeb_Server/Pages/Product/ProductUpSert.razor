@page "/product/create"
@page "/product/edit/{id:int}"

@inject IProductRepository _productRepository
@inject ICategoryRepository _categoryRepository
@inject NavigationManager _navigationmanager
@inject IFileUpload _fileUpload
@inject IJSRuntime _jsRuntime
@attribute [Authorize]

<div class="row my-2">
    <h3 class="card-title text-primary mb-3 ml-3">@Title Product</h3>

    <div class="col-md-10">
        @if (IsLoading)
        {
            <div class="text-center">
                <img src="/image/loading.gif" />
            </div>
        }
        else
        {
            <EditForm Model="Product" OnValidSubmit="UpsertProduct">
                <DataAnnotationsValidator />
                @*      <ValidationSummary />*@
                <div class="form-group">
                    <label>Name</label>
                    <InputText @bind-Value="Product.Name" class="form-control" />
                    <ValidationMessage For="()=>Product.Name" />
                </div>
                <div class="form-group">
                    <label>Color</label>
                    <InputText @bind-Value="Product.Color" class="form-control" />
                    <ValidationMessage For="()=>Product.Color" />
                </div>
                <div class="form-group">
                    <label>Description</label>
                     <InputTextArea @bind-Value="Product.Description" class="form-control" />
                    <ValidationMessage For="()=>Product.Description" />
                </div>
                <div class="row pt-3">
                    <div class="form-group col-6">
                    <div class="form-check">
                        <InputCheckbox @bind-Value="Product.ShopFavorites"></InputCheckbox>
                        <label class="form-check-label">Is Shop Favorities</label>
                    </div>
                    </div>
                    <div class="form-group col-6">
                        <div class="form-check">
                            <InputCheckbox @bind-Value="Product.CustomerFavorites"></InputCheckbox>
                            <label class="form-check-label">Is Customer Favorites</label>
                        </div>
                    </div>

                    <div class="form-group col-6">
                            <label>Category</label>
                            <InputSelect @bind-Value="Product.CategoryId" class="form-select">
                            <option value="0" disabled="disabled" selected>--Select Category--</option>
                                @foreach(var cat in Categories)
                                {
                                    <option value="@cat.Id">@cat.Name</option>
                                }
                            </InputSelect>
                        <ValidationMessage For="()=>Product.CategoryId" />

                    </div>
                    <div class="form-group pt-4 col-6">
                        <InputFile OnChange="HandleImageUpload"></InputFile>
                        </div>
                    </div>

                <div class="form-group py-2">
                    <button class="btn btn-primary">@Title</button>
                    <NavLink href="product" class="btn btn-secondary">Back To Index</NavLink>
                </div>
            </EditForm>
        }

    </div>

    <div class="col-md-2">
        <img src="@Product.ImageUrl" class="w-100"/>
    </div>
</div>

@code {
    [Parameter]
    public int Id { get; set; }
    private ProductDTO Product { get; set; } = new()
    {
        ImageUrl = "/image/default.png"
    };
    private IEnumerable<CategoryDTO> Categories { get; set; } = new List<CategoryDTO>();
    private string Title { get; set; } = "Create";
    public bool IsLoading { get; set; }
    public string OldImageUrl { get; set; }
    protected override async Task OnAfterRenderAsync(bool firsRender)
    {
        if (firsRender)
        {
            await LoadProduct();
        }
    }
    private async Task LoadProduct()
    {
        IsLoading = true;
        StateHasChanged();
        Categories = await _categoryRepository.GetAll();
        if (Id != 0)
        {
            //update
            Title = "Update";
            Product = await _productRepository.Get(Id);
            OldImageUrl = Product.ImageUrl;
        }
        IsLoading = false;
        StateHasChanged();
    }
    private async Task UpsertProduct()
    {
        if (Product.Id == 0)
        {
            //create
            await _productRepository.Create(Product);
            await _jsRuntime.ToastrSuccess("Product Create Successfully.");

        }
        else
        {
            //update
            if(OldImageUrl != Product.ImageUrl)
            {
                _fileUpload.DeleteFile(OldImageUrl);
            }
            await _productRepository.Update(Product);
            await _jsRuntime.ToastrSuccess("Product Updated Successfully.");
        }
        _navigationmanager.NavigateTo("product");
    }
    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        IsLoading = true;
        try
        {
            if(e.GetMultipleFiles().Count > 0)
            {
                foreach(var file in e.GetMultipleFiles())
                {
                    System.IO.FileInfo fineInfo = new System.IO.FileInfo(file.Name);
                    if (fineInfo.Extension.ToLower() == ".jpg" ||
                        fineInfo.Extension.ToLower() == ".png" ||
                       fineInfo.Extension.ToLower() == ".jpeg")
                    {
                        Product.ImageUrl = await _fileUpload.UploadFile(file);
                    }
                    else
                    {
                        await _jsRuntime.ToastrError("please select .jpg/.jpeg/.png file only");
                        return;
                    }

                }
            }
            IsLoading = false;
        }
        catch(Exception ex)
        {
            await _jsRuntime.ToastrError(ex.Message);
        }
    }
}
